version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ai_automation
      POSTGRES_PASSWORD: secure_password_2024
      POSTGRES_DB: ai_automation
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai_automation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_automation"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass secure_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai_automation_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # AI Automation API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Database
      DATABASE_URL: postgresql://ai_automation:secure_password_2024@postgres:5432/ai_automation
      
      # Redis
      REDIS_URL: redis://:secure_redis_2024@redis:6379/0
      
      # API Keys (set these in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Security
      SECRET_KEY: your-super-secret-key-change-in-production
      API_TOKEN: your-api-token-change-in-production
      
      # Application Settings
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: info
      
      # Vector Memory Settings
      VECTOR_EMBEDDING_MODEL: sentence-bert
      VECTOR_MAX_MEMORIES: 10000
      
      # Payment Settings
      CRYPTO_BITCOIN_ADDRESS: ${CRYPTO_BITCOIN_ADDRESS}
      CRYPTO_ETHEREUM_ADDRESS: ${CRYPTO_ETHEREUM_ADDRESS}
      WEB3_PROVIDER_URL: ${WEB3_PROVIDER_URL}
      
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./static:/app/static
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_automation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker for Background Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.tasks worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql://ai_automation:secure_password_2024@postgres:5432/ai_automation
      REDIS_URL: redis://:secure_redis_2024@redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_automation_network
    restart: unless-stopped

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A src.tasks beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DATABASE_URL: postgresql://ai_automation:secure_password_2024@postgres:5432/ai_automation
      REDIS_URL: redis://:secure_redis_2024@redis:6379/0
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_automation_network
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai_automation_network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_password_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - ai_automation_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    depends_on:
      - api
    networks:
      - ai_automation_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ai_automation_network:
    driver: bridge